/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef Server_TYPES_H
#define Server_TYPES_H

#include <iosfwd>

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/TBase.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>

#include <functional>
#include <memory>


namespace server {

class SerialisedNode;

typedef struct _SerialisedNode__isset {
  _SerialisedNode__isset() : index(false), level(false), key(false) {}
  bool index :1;
  bool level :1;
  bool key :1;
} _SerialisedNode__isset;

class SerialisedNode : public virtual ::apache::thrift::TBase {
 public:

  SerialisedNode(const SerialisedNode&);
  SerialisedNode& operator=(const SerialisedNode&);
  SerialisedNode() : index(0), level(0), key() {
  }

  virtual ~SerialisedNode() noexcept;
  int64_t index;
  int32_t level;
  std::string key;

  _SerialisedNode__isset __isset;

  void __set_index(const int64_t val);

  void __set_level(const int32_t val);

  void __set_key(const std::string& val);

  bool operator == (const SerialisedNode & rhs) const
  {
    if (!(index == rhs.index))
      return false;
    if (!(level == rhs.level))
      return false;
    if (!(key == rhs.key))
      return false;
    return true;
  }
  bool operator != (const SerialisedNode &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const SerialisedNode & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

  virtual void printTo(std::ostream& out) const;
};

void swap(SerialisedNode &a, SerialisedNode &b);

std::ostream& operator<<(std::ostream& out, const SerialisedNode& obj);

} // namespace

#endif
